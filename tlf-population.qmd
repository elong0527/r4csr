# Analysis population {#sec-population}

```{r, include=FALSE}
source("_common.R")
```

Following [ICH E3
guidance](https://database.ich.org/sites/default/files/E3_Guideline.pdf),
we need to summarize the number of participants included in each efficacy
analysis in Section 11.1, Data Sets Analysed.

```{r}
library(haven) # Read SAS data
library(dplyr) # Manipulate data
library(tidyr) # Manipulate data
library(r2rtf) # Reporting in RTF format
```

This chapter provides a step-by-step guide on creating a simple table for
the analysis population of a study in RTF format.
The expected output of the table is as follows:

```{r, out.width = "100%", out.height = if (knitr::is_html_output()) "400px", echo = FALSE, fig.align = "center"}
knitr::include_graphics("tlf/tbl_pop.pdf")
```

## Input data 

The initial step involves reading the ADSL datasets into R. 

```{r}
adsl <- read_sas("data-adam/adsl.sas7bdat")
```

the following variables are utilized:

- USUBJID: unique subject identifier
- ITTFL: intent-to-treat population flag
- EFFFL: efficacy population flag
- SAFFL: safety population flag

```{r}
adsl %>%
  select(USUBJID, ITTFL, EFFFL, SAFFL) %>%
  head(4)
```

## Helper functions

Before we writing the analysis code, 
let's explore the possibility of maximizing 
code reuse in R by creating helper functions.

::: {.callout-note}
As emphasized in the book [R for data
science](https://r4ds.had.co.nz/functions.html#when-should-you-write-a-function),
"You should consider writing a function whenever you've copied and
pasted a block of code more than twice".
:::

In @sec-disposition, there are a few repetitive steps involved:

- Formatting the percentages using the `formatC()` function.
- Calculating  the numbers and percentages by treatment arm.

We create two ad-hoc functions and use them to create the
tables in the rest of this book.

To address this, we introduce two ad-hoc functions that 
will assist us in creating tables throughout the remainder of this book.

The first function, named `fmt_num()`, is a straightforward implementation that 
wraps `formatC()` to format numbers and percentages.


```{r}
fmt_num <- function(x, digits, width = digits + 4) {
  formatC(
    x,
    digits = digits,
    format = "f",
    width = width
  )
}
```

One purpose of creating the `fmt_num()` function 
is to improve the readability of the analysis code.

To illustrate this, let's compare two versions of code for formatting percentages: 
the one used in @sec-disposition and the alternative approach using fmt_num().

```{r, eval = FALSE}
formatC(n / n() * 100,
  digits = 1, format = "f", width = 5
)
```

```{r, eval = FALSE}
fmt_num(n / n() * 100, digits = 1)
```

To calculate the numbers and percentages of participants by groups, we
provide a simple (but not robust) wrapper function, `count_by()`, using
the dplyr and tidyr package.

To compute the numbers and percentages of participants in different groups,
we offer a straightforward (albeit not robust) 
wrapper function called `count_by()`. 
This function depends on the dplyr and tidyr packages.

::: {.callout-note}
While there are several ways to improve the function, 
our current focus is on enhancing simplicity and readability. 
A good tutorial can be found from the  [STAT 545
course](https://stat545.com/functions-part1.html).
:::

```{r}
count_by <- function(data, # Input data set
                     grp, # Group variable
                     var, # Analysis variable
                     var_label = var, # Analysis variable label
                     id = "USUBJID") { # Subject ID variable
  data <- data %>% rename(grp = !!grp, var = !!var, id = !!id)

  left_join(
    count(data, grp, var),
    count(data, grp, name = "tot"),
    by = "grp",
  ) %>%
    mutate(
      pct = fmt_num(100 * n / tot, digits = 1),
      n = fmt_num(n, digits = 0),
      npct = paste0(n, " (", pct, ")")
    ) %>%
    pivot_wider(
      id_cols = var,
      names_from = grp,
      values_from = c(n, pct, npct),
      values_fill = list(n = "0", pct = fmt_num(0, digits = 0))
    ) %>%
    mutate(var_label = var_label)
}
```

The `count_by()` function help us simplify the analysis code:

```{r}
count_by(adsl, "TRT01PN", "EFFFL") %>%
  select(-ends_with(c("_54", "_81")))
```

## Output data 

The objective of this section is to create a dataset suitable for generating the expected report. 
This process will consist of several steps to generate each component of the reporting dataset.

With the aid of the helper function `count_by()`, 
preparing a report dataset becomes a straightforward task.

```{r}
# Derive a randomization flag
adsl <- adsl %>% mutate(RANDFL = "Y")

pop <- count_by(adsl, "TRT01PN", "RANDFL",
  var_label = "Participants in Population"
) %>%
  select(var_label, starts_with("n_"))
```

```{r}
pop1 <- bind_rows(
  count_by(adsl, "TRT01PN", "ITTFL",
    var_label = "Participants included in ITT population"
  ),
  count_by(adsl, "TRT01PN", "EFFFL",
    var_label = "Participants included in efficacy population"
  ),
  count_by(adsl, "TRT01PN", "SAFFL",
    var_label = "Participants included in safety population"
  )
) %>%
  filter(var == "Y") %>%
  select(var_label, starts_with("npct_"))
```

```{r}
names(pop) <- gsub("n_", "npct_", names(pop))
tbl_pop <- bind_rows(pop, pop1)

tbl_pop %>% select(var_label, npct_0)
```

## Reporting 

By using `tbl_pop` as input, we can generate the analysis population table using following code.

```{r}
rel_width <- c(2, rep(1, 3))
colheader <- " | Placebo | Xanomeline line Low Dose| Xanomeline line High Dose"
tbl_pop %>%
  # Table title
  rtf_title(
    "Summary of Analysis Sets",
    "(All Participants Randomized)"
  ) %>%
  # First row of column header
  rtf_colheader(colheader,
    col_rel_width = rel_width
  ) %>%
  # Second row of column header
  rtf_colheader(" | n (%) | n (%) | n (%)",
    border_top = "",
    col_rel_width = rel_width
  ) %>%
  # Table body
  rtf_body(
    col_rel_width = rel_width,
    text_justification = c("l", rep("c", 3))
  ) %>%
  # Encoding RTF syntax
  rtf_encode() %>%
  # Save to a file
  write_rtf("tlf/tbl_pop.rtf")
```

```{r, include=FALSE}
rtf2pdf("tlf/tbl_pop.rtf")
```

```{r, out.width = "100%", out.height = if (knitr::is_html_output()) "400px", echo = FALSE, fig.align = "center"}
knitr::include_graphics("tlf/tbl_pop.pdf")
```